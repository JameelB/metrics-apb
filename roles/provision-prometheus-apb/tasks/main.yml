- name: Create Prometheus config from template
  template:
    src: prometheus-config-map.yml.j2
    dest: /tmp/prometheus.yml

- name: Create config-map from Prometheus config
  shell: oc create configmap '{{ prometheus_configmap_name }}' --from-file=/tmp/prometheus.yml -n '{{ namespace }}'

- name: Give default user view permissions
  shell: oc policy add-role-to-user view system:serviceaccount:{{ namespace }}:default -n '{{ namespace }}'

- name: create prometheus deployment config
  openshift_v1_deployment_config:
    name: prometheus
    namespace: '{{ namespace }}'
    labels:
      app: prometheus
      service: prometheus
    replicas: 1
    selector:
      app: prometheus
      service: prometheus
    spec_template_metadata_labels:
      app: prometheus
      service: prometheus
    containers:
    - env:
      image: '{{ prometheus_image }}:{{ prometheus_version }}'
      name: prometheus
      ports:
      - container_port: '{{ prometheus_port }}'
        protocol: TCP
      volume_mounts:
        - mount_path: /etc/prometheus
          name: '{{ prometheus_configmap_volume_name }}'
        - mount_path: /prometheus
          name: prometheus-volume-1
    volumes:
      - name: '{{ prometheus_configmap_volume_name }}'
        config_map:
          defaultMode: 420
          name: '{{ prometheus_configmap_name }}'
      - name: prometheus-volume-1
        empty_dir:

- name: create prometheus service
  k8s_v1_service:
    name: prometheus
    namespace: '{{ namespace }}'
    labels:
      app: prometheus
      service: prometheus
    selector:
      app: prometheus
      service: prometheus
    ports:
      - name: web
        port: 443
        target_port: '{{ prometheus_port }}'

- name: create prometheus route
  openshift_v1_route:
    name: prometheus
    namespace: '{{ namespace }}'
    labels:
      app: prometheus
      service: prometheus
    to_name: prometheus
    spec_port_target_port: web
<<<<<<< HEAD
=======
    spec_tls_termination: edge
  
- name: "Retrieve route to prometheus"
  shell: "oc get routes prometheus -n {{ namespace }} | grep -v NAME | awk '{print $2}'"
  register: prometheus_route

- name: "Create prometheus secret yaml file"
  template:
    src: secret.yml.j2
    dest: /tmp/secret.yaml

- name: "Create prometheus secret"
  shell: "oc create -f /tmp/secret.yaml -n {{ namespace }}"

#
# Provision Grafana
#

- name: Create Grafana config from template
  template:
    src: grafana-config-map.ini.j2
    dest: /tmp/grafana.ini

- name: Create Grafana datasource config from template
  template:
    src: grafana-data-sources.yml.j2
    dest: /tmp/datasources.yml

- name: Create config-map from Grafana config
  shell: oc create configmap '{{ grafana_configmap_name }}' --from-file=grafana.ini=/tmp/grafana.ini -n '{{ namespace }}'

- name: create grafana deployment config
  openshift_v1_deployment_config:
    name: grafana
    namespace: '{{ namespace }}'
    labels:
      app: grafana
      service: grafana
    replicas: 1
    selector:
      app: grafana
      service: grafana
    spec_template_metadata_labels:
      app: grafana
      service: grafana
    containers:
    - env:
      image: '{{ grafana_image }}:{{ grafana_version }}'
      command:
        - /usr/sbin/grafana-server
      args:
        - '--homepath=/usr/share/grafana'
        - '--config=/etc/grafana/grafana.ini'
      name: grafana
      ports:
      - container_port: '{{ grafana_port }}'
        protocol: TCP
      volume_mounts:
        - mount_path: /etc/grafana
          name: '{{ grafana_configmap_volume_name }}'
        - mount_path: /var/lib/grafana
          name: grafana-data
        - mount_path: /var/log/grafana
          name: grafana-log
    volumes:
      - name: '{{ grafana_configmap_volume_name }}'
        config_map:
          defaultMode: 420
          name: '{{ grafana_configmap_name }}'
      - name: grafana-data
        empty_dir: 
      - name: grafana-log
        empty_dir: 

- name: create grafana service
  k8s_v1_service:
    name: grafana
    namespace: '{{ namespace }}'
    labels:
      app: grafana
      service: grafana
    selector:
      app: grafana
      service: grafana
    ports:
      - name: web
        port: 443
        target_port: '{{ grafana_port }}'

- name: create grafana route
  openshift_v1_route:
    name: grafana
    namespace: '{{ namespace }}'
    labels:
      app: grafana
      service: grafana
    to_name: grafana
    spec_port_target_port: web
    spec_tls_termination: edge

- name: "Retrieve route to grafana"
  shell: "oc get routes grafana -n {{ namespace }} | grep -v NAME | awk '{print $2}'"
  register: grafana_route

- name: create data source
  uri:
    url: https://{{ grafana_route.stdout }}/api/datasources
    method: POST
    user: root
    password: secret
    force_basic_auth: yes
    body: "{\"name\":\"prometheus\", \"type\":\"prometheus\", \"url\":\"https://{{prometheus_route.stdout}}\", \"access\":\"proxy\", \"isDefault\": true, \"basicAuth\":false, \"jsonData\":{\"tlsSkipVerify\":true}}"
    body_format: json
    validate_certs: no
  register: grafana_datasource_response
  until: grafana_datasource_response.status == 200
  retries: 600
  delay: 2
